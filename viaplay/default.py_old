# -*- coding: utf-8 -*-

import os
import sys
import re
import urllib
import urllib2
import htmllib
import xbmc
import xbmcgui
import xbmcplugin
import xbmcaddon
import base64
import time
import base64
import string
import tempfile
import tvdb_api
import subprocess as sp
import webbrowser
import urlparse
import zipfile
import xml.etree.ElementTree as ET
from BeautifulSoup import BeautifulSoup, BeautifulStoneSoup
from xml.dom.minidom import parseString
global thisPlugin
global XBMCPROFILE
global RESOURCE_FOLDER
global ROOT_FOLDER
#global tvDb

try:
    from sqlite3 import dbapi2 as sqlite
    xbmc.log("Loading sqlite3 as DB engine")
except:
    from pysqlite2 import dbapi2 as sqlite
    xbmc.log("Loading pysqlite2 as DB engine")

thisPlugin = int(sys.argv[1])
__settings__ = xbmcaddon.Addon(id='plugin.video.viaplay')
__language__ = __settings__.getLocalizedString
ROOT_FOLDER = __settings__.getAddonInfo('path')
XBMCPROFILE = xbmc.translatePath('special://profile')
RESOURCE_FOLDER = os.path.join(str(ROOT_FOLDER), 'resources')
LIB_FOLDER = os.path.join(str(RESOURCE_FOLDER), 'lib')
VIAPLAYER_PATH = os.path.join(str(LIB_FOLDER), 'viaplayLauncher.exe')
AUTOHOTKEY_PATH = os.path.join(str(LIB_FOLDER), 'MceRemoteHandler.exe')
SETTINGS_PLATFORM = __settings__.getSetting("PLATFORM")
SETTINGS_USERNAME = __settings__.getSetting("Username")
SETTINGS_USETVDB =(__settings__.getSetting("UseTvdb").lower() == "true")
SETTINGS_SORTBYADDED = (__settings__.getSetting("SortByAdded").lower() == "true")
#tvDb = tvdb_api.Tvdb(apikey="5736416B121F48D5")
SETTINGS_COUNTRY = __settings__.getSetting("Country")
PLATFORM_WIN=1
PLATFORM_LINUX=2
PLAFORM_MAC=3

class Link(object):
	def __init__(self, type=None, name=None, cmd=None, url=None):
		self.type = type
		self.name = name
		self.cmd = cmd
		self.url = url

class CachedTv(object):
	def __init__(self, seriesName=None, seriesId=None, dataUrl=None, fanartUrl=None):
		self.seriesName = seriesName
		self.seriesId = seriesId
		self.dataUrl = dataUrl
		self.fanartUrl = fanartUrl

class TvSeries(object):
	def __init__(self, season=None, episode=None, episodeTitle=None,filename=None, name=None):
		self.season = season
		self.episode = episode
		self.episodeTitle = episodeTitle
		self.name = name
		self.filename=filename
def RemoveFile(path):
    try:
		if(os.path.exists(path)):
			os.remove(path)
    except OSError:
        pass

def EscapeXml_old(value):
	string =str(value)
	string = string.replace('å','&aring;')
	string = string.replace('ä','&auml;')
	string = string.replace('ö','&ouml;')
	#string = string.replace('Å','&Aring;')
	#string = string.replace('Ä','&Auml;')
	#string = string.replace('Ö','&Ouml;')
	string = string.replace('...','&hellip;')
	#string = string.replace('\"','&quot;')
	string = string.replace('&','&amp;')
	# string = string.replace('ø','&oslash;')
	# string = string.replace('Ø','&Oslash;')
	# string = string.replace('æ','&aelig;')
	# string = string.replace('Æ','&AElig;')
	string = string.replace('É','&Eacute;')
	string = string.replace('é','&eacute;')
	return string
	
def EscapeXml(value):
	string =str(value)
	string = string.replace('å','&#229;')
	string = string.replace('ä','&#228;')
	string = string.replace('ö','&#246;')
	string = string.replace('Å','&#197;')
	string = string.replace('Ä','&#196;')
	string = string.replace('Ö','&#214;')
	#string = string.replace('.','&#46;')
	#string = string.replace('\"','&#34;')
	#string = string.replace('&','&#38;')
	string = string.replace('ø','&#248;')
	string = string.replace('Ø','&#216;')
	string = string.replace('æ','&#230;')
	string = string.replace('Æ','&#198;')
	string = string.replace('É','&#201;')
	string = string.replace('é','&#233;')
	return string

def DownloadFile(url,path):
	result=urllib2.urlopen(url)
	localFile = open(path, 'wb')
	localFile.write(result.read())
	localFile.close()
	# u = urllib2.urlopen(url)
	# localFile = open(path, 'w')
	# localFile.write(u.read())
	# localFile.close()

def GetFanArtBannerURL():
	xbmc.log("GetFanArtBannerURL")
	zip_dir = xbmc.translatePath('special://profile/addon_data/plugin.video.viaplay/tmp/')
	data_path = os.path.join(zip_dir, "banners.xml")
	xbmc.log("Data_path: " + data_path)
	
	xml = open(data_path, 'r').read()
	
	xbmc.log("Parse tree")
	tree = ET.parse(data_path)
	xbmc.log("Tree getroot")
	root = tree.getroot()
	xbmc.log("Find all banners")
	banners = root.findall("Banner")
	
	for banner in banners:
		if(banner.find("BannerType").text =="fanart"):
			url = urlparse.urljoin("http://thetvdb.com/banners/",str(banner.find("BannerPath").text).strip())
			xbmc.log("URL: " + url)
			return url
			
	xbmc.log("No banner url was found!")
	return ""

def GetSeries(seriesID):
	url = "http://thetvdb.com/api/5736416B121F48D5/series/"+seriesID+"/all/sv.zip"
	dir = os.path.dirname(__file__)
	zip_dir = xbmc.translatePath('special://profile/addon_data/plugin.video.viaplay/tmp/')
	zip_path = xbmc.translatePath(os.path.join( 'special://profile/addon_data/plugin.video.viaplay/tmp/', 'all.zip'  ))
	zip_url = "file:" + urllib.pathname2url(zip_path)
	
	zip_dir = zip_dir.decode('utf8')
	zip_path = zip_path.decode('utf8')
	zip_url = zip_url.decode('utf8')
	
	xbmc.log("Zip_dir: " + zip_dir)
	xbmc.log("Zip_path: " + zip_path)
	xbmc.log("Zip_url: " + zip_url)
	
	if not os.path.exists(zip_dir):
		xbmc.log("Path does not exist, create folder")
		os.makedirs(zip_dir)

	RemoveFile(zip_path)
	
	xbmc.log("Remove old files before extracting new ones...")
	for the_file in os.listdir(zip_dir):
		file_path = os.path.join(zip_dir, the_file)
		xbmc.log("Remove file: " + file_path)
		RemoveFile(file_path)
	
	xbmc.log("Download data from TheTvDb")
	#result = urllib.urlretrieve(url, "all.zip")
	DownloadFile(url,zip_path)
	#xbmc.log("Result: " + result)
	
	#extract_path = os.path.join(dir, "resources" + os.sep + "tvdb")
	data_path = os.path.join(zip_dir, "sv.xml")
	
	xbmc.log("Open zip-file: " + zip_path)
	zip = zipfile.ZipFile(zip_path)
	xbmc.log("Extract zip-file")
	zip.extractall(zip_dir)
	
	xbmc.log("Open xml-file")
	xml = open(data_path, 'r').read()
	
	xbmc.log("Parse tree")
	tree = ET.parse(data_path)
	xbmc.log("Tree getroot")
	root = tree.getroot()
	xbmc.log("Find all episodes")
	episodes = root.findall("Episode")
	
	series=[]
	xbmc.log("Find all series")
	seriesObj = root.findall("Series")
	xbmc.log("Get Series name")
	seriesName = seriesObj[0].find("SeriesName").text
	
	xbmc.log("Add episodes to collection")
	for episode in episodes:
		series.append(TvSeries(episode.find("SeasonNumber").text,episode.find("EpisodeNumber").text,episode.find("EpisodeName").text,episode.find("filename").text,seriesName))
	
	xbmc.log("All episodes added to collection")
	return series

def GetEpisodeName(seasonNo,episodeNo,episodes):
    for episode in episodes:
        if(str(episode.season)==str(seasonNo) and str(episode.episode)==str(episodeNo)):
			if (episode.episodeTitle==None):
				return ""
			else:
				return episode.episodeTitle
				
def GetEpisodeThumbnail(seasonNo,episodeNo,episodes):
    for episode in episodes:
        if(str(episode.season)==str(seasonNo) and str(episode.episode)==str(episodeNo)):
			if (episode.episodeTitle==None):
				return ""
			else:
				return str(episode.filename)

def GetSeriesID(seriesName):
	url ="http://thetvdb.com/api/GetSeries.php?seriesname="+urllib.quote_plus(seriesName)+"&language=sv"
	xbmc.log("TvDb GetSeriesID URL: " +url)
	result=urllib2.urlopen(url)
	xml = result.read()
	xml = xml.replace("\n","")
	xml = EscapeXml(xml)
	
	xbmc.log("TheTvDb GetSeriesID XML: " + xml)
	root = ET.fromstring(xml)
    #root = tree.getroot()
	xbmc.log("Find Series in XML")
	series = root.findall("Series")
	
	xbmc.log("Check if series is None")
	if(series==None):
		xbmc.log("Returning None")
		return None
	
	xbmc.log("Check if series is zero")
	if(len(series)<1):
		xbmc.log("Returning None")
		return None
	
	xbmc.log("The length of series is " + str(len(series)))
	
	xbmc.log("Go through each series")
	for serie in series:
		if(serie.find('SeriesName').text.lower().encode("utf-8")==seriesName.lower()):
			return str(serie.find("seriesid").text)

def CreateDatabase():
	checkFile = DatabasePath()#os.path.join(str(ROOT_FOLDER), 'favorites.db')
	xbmc.log('Path to database: ' + checkFile)
	havefile = os.path.isfile(checkFile)
	if(not havefile):
		con = sqlite.connect(checkFile)
		with con:
			cur = con.cursor()    
			cur.execute("CREATE TABLE Favorites(Id INTEGER PRIMARY KEY, Title TEXT, Type TEXT, Url TEXT, Poster TEXT, Year INTEGER, Director TEXT, Desc TEXT);")
			cur.execute("CREATE TABLE Version(Version INTEGER);")
			cur.execute("CREATE TABLE WatchedEpisodes(Id INTEGER PRIMARY KEY, Title TEXT, Season INTEGER, Episode INTEGER);")
			cur.execute("CREATE TABLE TvCache(Id INTEGER PRIMARY KEY, SeriesName TEXT, SeriesId INTEGER, DataUrl TEXT, FanArtUrl TEXT);")
			cur.execute("INSERT INTO Version (Version) VALUES(3)")

def UpgradeDatabase():
	xbmc.log("Check for database upgrade")
	version = DatabaseVersion()
	checkFile = DatabasePath()
	havefile = os.path.isfile(checkFile)
	if(havefile):
		con = sqlite.connect(checkFile)
		with con:
			cur = con.cursor()
			if version =="1":
				cur.execute("CREATE TABLE WatchedEpisodes(Id INTEGER PRIMARY KEY, Title TEXT, Season INTEGER, Episode INTEGER);")
				cur.execute("UPDATE Version SET Version = 2")
				xbmc.log("Database was upgraded to version: 2")
			if version=="2":
				cur.execute("CREATE TABLE TvCache(Id INTEGER PRIMARY KEY, SeriesName TEXT, SeriesId INTEGER, DataUrl TEXT, FanArtUrl TEXT);")
				cur.execute("UPDATE Version SET Version = 3")
				xbmc.log("Database was upgraded to version: 3")

def DatabasePath():
	path = os.path.join(str(ROOT_FOLDER), 'favorites.db')
	path = path.decode('utf8')
	return path

# Retrieves the current database version
def DatabaseVersion():
	con = sqlite.connect(DatabasePath())
	with con:
		cur = con.cursor()
		cur.execute("SELECT Version FROM Version")
		rows = cur.fetchall()
		return str(rows[0][0])

# Adds an episode as watched to the database.
def AddWatchedEpisode(title, season, episode):
	path = DatabasePath()
	con = sqlite.connect(path)
	with con:
		cur = con.cursor()
		cur.execute('''INSERT INTO WatchedEpisodes (Title,Season,Episode) VALUES(?,?,?)''', (title,season,episode))

def AddCachedTV(seriesName,seriesId, dataUrl, fanartUrl):
	path = DatabasePath()
	con = sqlite.connect(path)
	with con:
		cur = con.cursor()
		cur.execute('''INSERT INTO TvCache (SeriesName,SeriesId,DataUrl,FanArtUrl) VALUES(?,?,?,?)''', (seriesName,seriesId,dataUrl,fanartUrl))
		
def RemoveWatchedEpisode(title,season,episode):
	path = os.path.join(str(ROOT_FOLDER), 'favorites.db')
	con = sqlite.connect(path)
	with con:
		cur = con.cursor()
		cur.execute('''DELETE FROM WatchedEpisodes WHERE Title=? AND Season=? AND Episode=?''',(title,season,episode))
		
def AddFavorite(title,type,url,poster,year,director,desc):
	path = DatabasePath()#os.path.join(str(ROOT_FOLDER), 'favorites.db')
	con = sqlite.connect(path)
	with con:
		cur = con.cursor()
		cur.execute('''INSERT INTO Favorites (Title,Type,Url,Poster,Year,Director,Desc) VALUES(?,?,?,?,?,?,?)''', (title,type,url,poster,year,director,desc))

def RemoveFavorite(id):
	path = os.path.join(str(ROOT_FOLDER), 'favorites.db')
	con = sqlite.connect(path)
	with con:
		cur = con.cursor()
		cur.execute("DELETE FROM Favorites WHERE Id="+str(id))

def IsWatchedEpisode(title,season,episode):
	path = DatabasePath()
	con = sqlite.connect(path)
	value=False
	
	with con:
		cur = con.cursor()
		cur.execute('''SELECT * FROM WatchedEpisodes WHERE Title=? AND Season=? AND Episode=?''',(title,season,episode))

		row = cur.fetchone()
		if row is None:
			value=False
		else:
			value=True
	return value

def GetCachedTv(seriesName):
	try:
		path = DatabasePath()
		con = sqlite.connect(path)
		value=False
		
		with con:
			cur = con.cursor()
			cur.execute('''SELECT * FROM TvCache WHERE SeriesName=?''',(seriesName))

			row = cur.fetchone()
			if row is None:
				return None
			else:
				return CachedTv(row[0]["SeriesName"],row[0]["SeriesId"],row[0]["DataUrl"],row[0]["FanArtUrl"])

		return None
	except:
		return None
	
	
def LoadTvFavorites():
	path = os.path.join(str(ROOT_FOLDER), 'favorites.db')
	con = sqlite.connect(path)
	with con:
		cur = con.cursor()
		cur.execute("SELECT * FROM Favorites WHERE Type='tv' ORDER BY Title Asc")

		rows = cur.fetchall()

		for row in rows:
			id=str(row[0])
			title = unicode(row[1]).encode('utf-8')
			poster = str(row[4])
			url = str(row[3])
			listItem = xbmcgui.ListItem(title)
			listItem.setThumbnailImage(poster)
			infoLabels = { "Title": title,"tvshowtitle": title }
			listItem.setInfo(type="Video", infoLabels=infoLabels)
			item_url=str(sys.argv[0]) + '?' + "url=" + urllib.quote_plus(url) + "&mode=series&title=" + urllib.quote_plus(title)
			
			cm_url = str(sys.argv[0]) + '?' + "id=" + urllib.quote_plus(id) + "&mode=remove_tv_favorite" + "&title="+urllib.quote_plus(title)
			listItem.addContextMenuItems([(unicode(__language__(4020)).encode('utf-8'), "XBMC.RunPlugin(%s)" % (cm_url),)],replaceItems=True)

			xbmcplugin.addDirectoryItem(thisPlugin,item_url,listItem,isFolder=True)
	xbmc.executebuiltin("Container.SetViewMode(500)")
def ReloadSettings():
	__settings__ = xbmcaddon.Addon(id='plugin.video.viaplay')
	__language__ = __settings__.getLocalizedString
	SETTINGS_COUNTRY = __settings__.getSetting("Country")
		
def GetLinks(url_Type):
	linksDir = os.path.join(str(RESOURCE_FOLDER), 'links')
	filepath = os.path.join(str(linksDir), GetLinksFilename())
	filepath = filepath.decode('utf8')
	xbmc.log('GetLinks filepath: ' + filepath)
	file = open(filepath,'r')
	data = file.read()
	file.close()
	
	dom = parseString(data)
	test=dom.getElementsByTagName('Links')
	
	links=[]
	for item in test:
		if item.childNodes[1].childNodes[0].nodeValue==url_Type:
			url = FixHtmlString(str(item.childNodes[7].childNodes[0].nodeValue))
			#name = FixHtmlString(unicode(item.childNodes[3].childNodes[0].nodeValue).encode('utf-8'))
			links.append(Link(item.childNodes[1].childNodes[0].nodeValue,item.childNodes[3].childNodes[0].nodeValue,item.childNodes[5].childNodes[0].nodeValue,url))
	return links

def DoesSeriesExistAtTvDb(series_name):
    try:
        t = tvdb_api.Tvdb(language="sv")
        series =  t[unicode(series_name)]
        xbmc.log('DoesSeriesExistAtTvDb: True')
        return True
    except Exception as ex:
        xbmc.log('DoesSeriesExistAtTvDb: False ' + str(ex) + ' series_name = ' + series_name)
        return False

def CreatePlayerCoreFactory(path):
	xml =""
	xml +="<playercorefactory>"
	xml +="<players>"
	xml +="<player name=\"IE\" type=\"ExternalPlayer\">"
	xml +="<filename>"+str(VIAPLAYER_PATH)+"</filename>"
	xml +="<args>-k \"{1}\"</args>"
	xml +="<hidexbmc>false</hidexbmc>"
	xml +="<hideconsole>false</hideconsole>"
	xml +="<warpcursor>none</warpcursor>"
	xml +="</player>"
	xml +="</players>"
	xml +="<rules action=\"prepend\">"
	xml +="<rule name=\"html\" filetypes=\"html\" player=\"IE\" />"
	xml +="</rules>"
	xml +="</playercorefactory>"
	
	f = open(path,'w+')
	f.write(xml)
	f.close()
	
def checkplayercore():
	xbmc.log('CheckPlayerCore')
	checkFile = os.path.join(str(XBMCPROFILE), 'playercorefactory.xml')
	havefile = os.path.isfile(checkFile)
	xbmc.log('Path to playercorefactory: ' + checkFile)
	if(not havefile):
        #copy file data from addon folder
		xbmc.log('Platform is: ' + os.name)
		if(os.name=='nt'):
			xbmc.log('Create playercorefactory.xml for Windows')
			CreatePlayerCoreFactory(checkFile)
			xbmcgui.Dialog().ok( "Viaplay add-on", __language__(4011) ) #You need to restart XBMC before you can use the Viaplay add-on.
		else:
			xbmc.log('The platform is not windows, create playercorefactory for other platform')
			fileWithData = os.path.join(str(RESOURCE_FOLDER), 'playercorefactory.xml')
			if not os.path.exists('C:\Program Files (x86)'):
				fileWithData = os.path.join(str(RESOURCE_FOLDER), 'playercorefactory32.xml')
			if not os.path.exists('C:\Program Files'):
				fileWithData = os.path.join(str(RESOURCE_FOLDER), 'playercorefactoryOSX.xml')
				xbmc.log('Create playercorefactoryOSX.xml for Mac OSX')
			data = open(str(fileWithData),'r').read()
			f = open(checkFile,'w+')
			f.write(data)
			f.close()
    
def checkadvsettings():
    checkFile = os.path.join(str(XBMCPROFILE), 'advancedsettings.xml')
    havefile = os.path.isfile(checkFile)
    if(not havefile):
        #copy file from addon folder
        fileWithData = os.path.join(str(RESOURCE_FOLDER), 'advancedsettings.xml')
        data = open(str(fileWithData),'r').read()
        f = open(checkFile,'w+')
        f.write(data)
        f.close()

def SortListItems():
	if(not SETTINGS_SORTBYADDED):
		xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_LABEL )
		
def parameters_string_to_dict(param_string):
	params = {}
	
	if param_string:
		pairs = param_string[1:].split("&")

		for pair in pairs:

			split = pair.split('=')

			if (len(split)) == 2:
				params[split[0]] = split[1]
	
	return params

def GetLinksFilename():
	if SETTINGS_COUNTRY=="0":
		return "viaplay_se.xml"
	elif SETTINGS_COUNTRY=="1":
		return "viaplay_dk.xml"
	elif SETTINGS_COUNTRY=="2":
		return "viaplay_no.xml"
	elif SETTINGS_COUNTRY=="3":
		return "viaplay_fi.xml"
		
	return "viaplay_se.xml"
def GetDomain():
	if SETTINGS_COUNTRY=="0":
		return "http://viaplay.se"
	elif SETTINGS_COUNTRY=="1":
		return "http://viaplay.dk"
	elif SETTINGS_COUNTRY=="2":
		return "http://viaplay.no"
	elif SETTINGS_COUNTRY=="3":
		return "http://viaplay.fi"
		
	return "http://viaplay.se"
def LoadTvByAlphabet(url):
    #url = "http://viaplay.se/tv/samtliga/17235/alphabetical"
	page=urllib2.urlopen(url)
	soup = BeautifulSoup(page.read())
	
	alphabet=soup.findAll('ul', attrs={'class' : 'atoz-list'})
	for letter in alphabet:
		for series in letter.findAll('li'):
			if series.contents[1].name=='h4':
				tv_title= FixHtmlString(unicode(series.contents[1].contents[0].string).encode('utf-8'))
				tv_url = urlparse.urljoin(GetDomain() , str(series.contents[1].contents[0].attrs[0][1]))
				#tv_cover_url=GetSeriesCover(tv_url)
				listItem = xbmcgui.ListItem(tv_title)
				#listItem.setThumbnailImage(tv_cover_url)
				infoLabels = { "Title": tv_title,"tvshowtitle": tv_title }
				listItem.setInfo(type="Video", infoLabels=infoLabels)
				item_url=str(sys.argv[0]) + '?' + "url=" + urllib.quote_plus(tv_url) + "&mode=series"
				xbmcplugin.addDirectoryItem(thisPlugin,item_url,listItem,isFolder=True)
	xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_LABEL )
	xbmc.executebuiltin("Container.SetViewMode(50)")
def LoadMoviesByAlphabet(url):
    #url = "http://viaplay.se/tv/samtliga/17235/alphabetical"
	page=urllib2.urlopen(url)
	soup = BeautifulSoup(page.read())
	
	alphabet=soup.findAll('ul', attrs={'class' : 'atoz-list'})
	for letter in alphabet:
		for series in letter.findAll('li'):
			if series.contents[1].name=='h4':
				movie_title= FixHtmlString(unicode(series.contents[1].contents[0].string).encode('utf-8'))
				movie_url = urlparse.urljoin(GetDomain() , str(series.contents[1].contents[0].attrs[0][1]))
				movie_genre = unicode(series.contents[3].string).encode('utf-8')
				#tv_cover_url=GetSeriesCover(tv_url)
				listItem = xbmcgui.ListItem(movie_title)
				#listItem.setThumbnailImage(tv_cover_url)
				infoLabels = { "Title": movie_title + GetHDTag('',movie_genre,'') }
				listItem.setInfo(type="Video", infoLabels=infoLabels)
				item_url=str(sys.argv[0]) + '?' + "url=" + urllib.quote_plus(movie_url) + "&mode=play"
				xbmcplugin.addDirectoryItem(thisPlugin,item_url,listItem,isFolder=False)
	xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_LABEL )
	xbmc.executebuiltin("Container.SetViewMode(50)")
def GetSeriesCover(url):
    page=urllib2.urlopen(url)
    soup = BeautifulSoup(page.read())

    section=soup.findAll('div', attrs={'class' : 'content'})
    return Get_PosterUrl(str(section[0].contents[1].contents[1]))
#Loads a specific view which contains only mixed episodes from different series.
def LoadEpisodesView(url):
	try:
		page=urllib2.urlopen(url)
		soup = BeautifulSoup(page.read())

		items=soup.findAll('ul', attrs={'class' : 'media-list tv clearfix'})
		for item in items:
			for series in item.findAll('li'):
				tv_url = urlparse.urljoin(GetDomain() , str(series.contents[1].attrs[2][1]))
				xbmc.log('Episode url: ' + tv_url)
				tv_title = unicode(series.contents[7].contents[1].contents[1].attrs[1][1]).encode('utf-8')
				tv_image = Get_PosterUrl(str(series.contents[1].contents[1]))
				tv_season = int(GetSeason(series.contents[1].attrs[2][1]))
				tv_episode = int(GetEpisode(series.contents[1].attrs[2][1]))
				tv_synopsis = FixHtmlString(unicode(str(series.contents[7].contents[9].string)).encode('utf-8'))
				listItem = xbmcgui.ListItem(tv_title)
				listItem.setThumbnailImage(tv_image)
				infoLabels = { "Title": tv_title,"tvshowtitle": tv_title,"season": tv_season,"episode": tv_episode,"plotoutline": tv_synopsis,"plot": tv_synopsis}
				listItem.setInfo(type="Video", infoLabels=infoLabels)
				item_url=str(sys.argv[0]) + '?' + "url=" + urllib.quote_plus(tv_url) + "&mode=play"
				xbmcplugin.addDirectoryItem(thisPlugin,item_url,listItem)
		xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_LABEL )
		xbmcplugin.setContent(thisPlugin, 'episodes')
		xbmc.executebuiltin("Container.SetViewMode(504)")
	except Exception as ex:
		xbmc.log("Error in LoadEpisodesView")
		xbmc.log("LoadEpisodesView, URL: " + url)
		#xbmc.log("Error: " + ex)
def TestTvDb():
	t = tvdb_api.Tvdb()
	episode = t['My Name Is Earl'][1][3] # get season 1, episode 3 of show
	xbmc.log("Episodename: " + episode['episodename']) # Print episode name
	
def LoadTvSeries(url):
    #url="http://viaplay.se/tv"
	page=urllib2.urlopen(url)
	soup = BeautifulSoup(page.read())
	#DoesSeriesExistAtTvDb('Fringe')
	#show = tvDb["Fringe"]
	#xbmc.log("Epsiode name: " + show[1][1])
	
	items=soup.findAll('ul', attrs={'class' : 'media-list tv clearfix'})
	for item in items:
		for series in item.findAll('li'):
			tv_url = urlparse.urljoin(GetDomain(), str(series.contents[1].attrs[2][1])) #GetDomain() + '/' + str(series.contents[1].attrs[2][1])
			tv_title = unicode(series.contents[7].contents[1].contents[1].attrs[1][1]).encode('utf-8')
			tv_image = Get_PosterUrl(str(series.contents[1].contents[1]))
			listItem = xbmcgui.ListItem(tv_title)
			listItem.setThumbnailImage(tv_image)
			infoLabels = { "Title": tv_title,"tvshowtitle": tv_title }
			listItem.setInfo(type="Video", infoLabels=infoLabels)
			item_url=str(sys.argv[0]) + '?' + "url=" + urllib.quote_plus(tv_url) + "&mode=series&title=" + urllib.quote_plus(tv_title)
			cm_url = str(sys.argv[0]) + '?' + "title=" + urllib.quote_plus(tv_title) + "&mode=add_tv_favorite" + "&url="+urllib.quote_plus(tv_url) +"&poster=" + urllib.quote_plus(tv_image)
			menu_title = unicode(__language__(4019)).encode('utf-8')
			listItem.addContextMenuItems([(menu_title, "XBMC.RunPlugin(%s)" % (cm_url),)],replaceItems=True)
			
			xbmcplugin.addDirectoryItem(thisPlugin,item_url,listItem,isFolder=True)
	#xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_LABEL )
	SortListItems()
	#xbmcplugin.setContent(thisPlugin, 'tvshows')
	xbmc.executebuiltin("Container.SetViewMode(500)")
def GetShowData(name):
	db = tvdb_api.Tvdb(cache = True,language="sv",apikey="5736416B121F48D5") #,apikey="5736416B121F48D5"
	#db = tvDb(cache = True,language='sv')
	xbmc.log("Tvdb type:" + str(type(db)))
	return db[name]

def CheckURL(url):
	if(url.find("episode") >-1):
		return GetSeriesUrlFromEpisode(url)
	elif(url.find("season")>-1):
		newUrl=""
		list = url.split("/")
		for item in list:
			if item.find("season-") ==-1:
				if(str(item)=="http:"):
					newUrl = "http:/"
				else:
					newUrl += str(item)+"/"
			else:
				return newUrl
	else:
		return url
	
def GetSeriesUrlFromEpisode(url):
    try:
        page=urllib2.urlopen(url)
        soup = BeautifulSoup(page.read())
        result = soup.findAll('dd',attrs={'data-metadata-type':'format'})
        return str(result[0].contents[0].attrs[1][1])
    except:
        return ""
	
def LoadEpisodes(url,seriesName):
	try:
		xbmc.log("LoadEpisoded URL: " + url)
		url = CheckURL(url)
		xbmc.log("Url after CheckUrl: " + url)
		xbmc.log("GetFanArt from url")
		url_fan_art=GetFanArt(url)
		xbmc.log("FanArtUrl: " + url_fan_art)

		page=urllib2.urlopen(url)
		soup = BeautifulSoup(page.read())
		#fanart = soup.findAll('div',attrs={'class':'content'})
		seasons=soup.findAll('div', attrs={'class' : 'media-wrapper seasons'})
		fanArtUrl=""
		
		xbmc.log("Step1")
		if(SETTINGS_USETVDB):
			xbmc.log("Call to GetCachedTv")
			cachedTv=GetCachedTv(seriesName)

			if(cachedTv==None):
				xbmc.log("No cached TVdb id was found")
				id=GetSeriesID(seriesName)
			else:
				xbmc.log("Using cached TVdb ID")
				id=cachedTv.seriesId

			if(id!=None):
				xbmc.log("ID is not None")
				xbmc.log("TheTvDb Series ID: "+id)
				episodes=GetSeries(id)
				if(cachedTv==None):
					xbmc.log("Downloading fanart from the TVdb")
					fanArtUrl = GetFanArtBannerURL()
					xbmc.log("Add tv series to cache")
					dataUrl = "http://thetvdb.com/api/5736416B121F48D5/series/"+id+"/all/sv.zip"
					AddCachedTV(seriesName,id, dataUrl, fanArtUrl)
				else:
					xbmc.log("Using cached fanart")
					fanArtUrl=cachedTv.fanartUrl
			else:
				xbmc.log("ID is None")
				episodes=None
		else:
			episodes=None
		
		for season in seasons:
			for episode in season.findAll('li'):
				xbmc.log("Step2")
				episode_url =  urlparse.urljoin(GetDomain() , str(episode.contents[1].attrs[2][1]))
				xbmc.log('Episode url: ' + episode_url)
				#test = episode.contents[1].contents[3].contents[0]
				try:
					title = str(episode.contents[1].contents[3].contents[0]).encode('utf-8')
				except UnicodeDecodeError:
					title = str(episode.contents[1].contents[3].contents[0]).decode('utf-8')
				else:
					title = episode.contents[1].contents[3].contents[0]
				episode_image = Get_PosterUrl(str(episode.contents[1].contents[1]))
				try:
					episode_season = int(GetSeason(episode.contents[1].attrs[2][1]))
				except:
					episode_season=1
				try:
					episode_no = int(GetEpisode(episode_url))
				except:
					episode_no=1
				
				url_title = GetTitleFromUrl(str(episode.contents[1].attrs[2][1]))
				if IsWatchedEpisode(url_title,episode_season,episode_no):
					overlay=xbmcgui.ICON_OVERLAY_WATCHED
					playcount=1
				else:
					overlay=xbmcgui.ICON_OVERLAY_UNWATCHED
					playcount=0

				episode_synopsis = FixHtmlString(unicode(str(episode.contents[7].contents[9].string)).encode('utf-8'))
				episode_title = unicode(__language__(4024)).encode('utf-8') + str(episode_season) + " " + unicode(__language__(4025)).encode('utf-8') + str(episode_no)#title
				
				if(episodes!=None):
					episode_Name=FormatValue(GetEpisodeName(episode_season,episode_no,episodes))
					if(episode_Name=="None"):
						episode_Name=None
					#episode_Name= str(GetEpisodeName(episode_season,episode_no,episodes)).encode('utf-8')
					# try:
						# episode_Name= unicode(GetEpisodeName(episode_season,episode_no,episodes)).encode('utf-8')
					# except UnicodeDecodeError:
						# episode_Name= str(GetEpisodeName(episode_season,episode_no,episodes)).decode('utf-8')
					# else:
						# episode_Name= GetEpisodeName(episode_season,episode_no,episodes)

					if(episode_Name!=None):
						episode_title = episode_title + " - " + episode_Name
					episode_thumbnail = GetEpisodeThumbnail(episode_season,episode_no,episodes)
					if(episode_thumbnail!=None):
						episode_image="http://thetvdb.com/banners/"+episode_thumbnail
				listItem = xbmcgui.ListItem(title)
				listItem.setThumbnailImage(episode_image)
				
				if(SETTINGS_USETVDB):
					xbmc.log("UseTvDb FanArtUrl: " + fanArtUrl)
					if(len(fanArtUrl) > 0):
						listItem.setProperty("Fanart_Image", fanArtUrl)
					else:
						listItem.setProperty("Fanart_Image", url_fan_art)
				else:
					listItem.setProperty("Fanart_Image", url_fan_art)
				
				infoLabels = { "Title": episode_title,"tvshowtitle": title,"season": episode_season,"episode": episode_no,"plotoutline": episode_synopsis,"plot": episode_synopsis,"overlay":overlay,"playcount":playcount}
				listItem.setInfo(type="Video", infoLabels=infoLabels)
				item_url=str(sys.argv[0]) + '?' + "url=" + urllib.quote_plus(episode_url) + "&mode=play"
				
				cm_url_remove = str(sys.argv[0]) + '?' + "season=" + urllib.quote_plus(str(episode_season)) +"&episode="+ urllib.quote_plus(str(episode_no)) +"&mode=remove_watched_episode" + "&title="+urllib.quote_plus(url_title)
				cm_url_add = str(sys.argv[0]) + '?' + "season=" + urllib.quote_plus(str(episode_season)) +"&episode="+ urllib.quote_plus(str(episode_no)) +"&mode=add_watched_episode" + "&title="+urllib.quote_plus(url_title)
				listItem.addContextMenuItems([("Markera som visad", "XBMC.RunPlugin(%s)" % (cm_url_add),),("Markera som inte visad", "XBMC.RunPlugin(%s)" % (cm_url_remove),)],replaceItems=True)
				
				xbmcplugin.addDirectoryItem(thisPlugin,item_url,listItem)
				xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_LABEL )
		xbmcplugin.setContent(thisPlugin, 'episodes')
		xbmc.executebuiltin("Container.SetViewMode(504)")
	except Exception as ex:
		raise ex
		xbmc.log("Error in LoadEpisodes")
		xbmc.log("LoadEpisodes, URL: " + url)

def FormatValue(text):
	value=""
	try:
		value= unicode(text).encode('utf-8')
	except UnicodeDecodeError:
		try:
			value= str(text).decode('utf-8')
		except:
			value= text
	
	return value
		
def Get_FanArtUrl(value):
	list=value.split("\"")
	return str(list[3])

def GetFanArt(url):
    try:
        page=urllib2.urlopen(url)
        soup = BeautifulSoup(page.read())
        fanart = soup.findAll('img',attrs={'property':'image'})
        url_fan_art=str(fanart[0])
        list=url_fan_art.split("\"")
        return list[3]
    except:
        return ""
	
def GetTitleFromUrl(value):
	list=value.split("/")
	return str(list[2])
	
def GetSeason(value):
	list=value.split("/")
	for item in list:
		if item.find("season-") >-1:
			season = str(item).replace("season-","")
			return season

def GetEpisode(value):
	list=value.split("/")
	for item in list:
		if item.find("episode-") >-1:
			episode = str(item).replace("episode-","")
			if episode.find("-") > -1:
				episode=episode[:1]
			return episode

def LoadLiveSports(url):
	page=urllib2.urlopen(url)
	soup = BeautifulSoup(page.read())
	sports=soup.findAll('ul', attrs={'class' : 'media-list sport clearfix'})
	for sport in sports:
		for item in sport.findAll('li'):
			sport_url = urlparse.urljoin(GetDomain() , str(item.contents[7].contents[1].contents[1].attrs[2][1]))
			sport_title = FixHtmlString(unicode(item.contents[1].contents[3].string).encode("utf-8"))
			sport_image = Get_PosterUrl(str(item.contents[1].contents[1]))
			sport_hd = str(item.contents[3].contents[7].string)
			sport_genre=unicode(item.contents[7].contents[3].contents[0].string).encode("utf-8")
			sport_starttime = str(item.contents[7].contents[7].contents[1].string)
			sport_startdate = Get_DateTime(str(item.contents[7].contents[1].contents[1].attrs[1][1]))
			sport_desc = FixHtmlString(unicode(item.contents[7].contents[9].string).encode("utf-8"))
			if(IsHD("",sport_hd,"")):
				overlay=xbmcgui.ICON_OVERLAY_HD
			else:
				overlay=xbmcgui.ICON_OVERLAY_NONE
			sport_title = sport_title + " (" + sport_startdate + ")"
			listItem = xbmcgui.ListItem(sport_title)
			listItem.setThumbnailImage(sport_image)
			listItem.setLabel2(sport_startdate)
			infoLabels = { "Title": sport_title,"Genre": sport_genre,"Year": 0,"Director": "","Cast": "","Plot": sport_desc,'Date': Get_Date(sport_startdate),'overlay':overlay }
			listItem.setInfo(type="Video", infoLabels=infoLabels)
			cmd_url=str(sys.argv[0]) + '?' + "url=" + urllib.quote_plus(sport_url) + "&mode=play"
			xbmcplugin.addDirectoryItem(thisPlugin,cmd_url,listItem)
			xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_DATE )
			xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_TITLE )
	#xbmcplugin.setContent(thisPlugin, 'movies')
	xbmc.executebuiltin("Container.SetViewMode(500)")
	xbmc.executebuiltin("Container.SetSortMethod(3)")

def Get_DateTime(value):
    list=value.split(" ")
    return str(list[0]+ " " + list[1])

def Get_Date(value):
    list=value.split(" ")
    return str(list[0])

def LoadLiveSportScheduleGetDays(url):
    page=urllib2.urlopen(url)
    soup = BeautifulSoup(page.read())
    schedule = soup.findAll(lambda tag: tag.name == "section" and tag.attrs)
    for item in schedule:
        if(str(item.attrs[0][1]).startswith('day')):
			id = str(item.attrs[0][1])
			day = unicode(item.contents[1].contents[0]).encode("utf-8")
			date = str(item.contents[1].contents[1].contents[0]).strip()
			url =str(sys.argv[0]) + '?' + "mode=sport_schedule_day&url="+urllib.quote_plus(url)+"&id=" +urllib.quote_plus(id)
			AddListItem(day +" " + date,url,True)
	xbmc.executebuiltin("Container.SetViewMode(50)")

def LoadLiveSportScheduleForSpecificDay(url,id):
	xbmc.log('----------------- START ----------------')
	xbmc.log('Url: ' + url + ' id: ' + id)
	page=urllib2.urlopen(url)
	#xbmc.log('Call: urllib2.urlopen')
	soup = BeautifulSoup(page.read())
	#xbmc.log('BeautifulSoup')
	schedule = soup.find("section", {"id": id})
	#schedule = soup.findAll(lambda tag: tag.name == "section")
	#xbmc.log('soup.find')
	events = schedule.findAll('li')
	#xbmc.log('soup.findAll')
	# for item in schedule:
		# if(str(item.attrs[0][1])==id):
	for event in events:
		#xbmc.log('Event')
		hd=""
		if(str(event.contents[3].contents[3]).find(">hd<") > -1):
			hd=" - HD"
		else:
			hd=""
		subEvents = event.findAll('div', attrs={'class' : 'block'})
		event_time = str(event.contents[1].contents[0])
		#xbmc.log('Event_time: ' + event_time)
		event_url = urlparse.urljoin(GetDomain() , str(event.contents[3].contents[1].attrs[1][1]))
		#xbmc.log('Event_url: ' + event_url)
		event_title = str(event.contents[3].contents[1].contents[1].contents[0]).replace("\n","").replace("\t","").strip()
		#xbmc.log('Event_title: ' + event_title)
		event_genre = str(event.contents[3].contents[3].contents[1].contents[1].contents[0]).replace("\n","").replace("\t","").strip()
		#xbmc.log('Event_genre: ' + event_genre)
		title = event_time + " " + event_title + " (" + event_genre +")" + hd
		#xbmc.log('title: '+title)
		listItem = xbmcgui.ListItem(title)
		cmd_url=str(sys.argv[0]) + '?' + "url=" + urllib.quote_plus(event_url) + "&mode=play"
		xbmcplugin.addDirectoryItem(thisPlugin,cmd_url,listItem)
		
		for subEvent in subEvents:
			event_url = urlparse.urljoin(GetDomain() , str(subEvent.contents[1].attrs[1][1]).strip()) #subEvent.contents[1].contents[1].contents[0]
			event_title = str(subEvent.contents[1].contents[1].contents[0]).replace("\n","").replace("\t","").strip()
			event_genre = str(subEvent.contents[3].contents[1].contents[1].contents[0]).replace("\n","").replace("\t","").strip()
			subEventHd=""
			if(str(subEvent.contents[3].contents[1]).find(">hd<") > -1):
				subEventHd=" - HD"
			else:
				subEventHd=""
			title = event_time + " " + event_title + " (" + event_genre +")" + subEventHd
			listItem = xbmcgui.ListItem(title)
			cmd_url=str(sys.argv[0]) + '?' + "url=" + urllib.quote_plus(event_url) + "&mode=play"
			xbmcplugin.addDirectoryItem(thisPlugin,cmd_url,listItem)
		#xbmc.log('addDirectoryItem')
		#xbmc.log('----------------- End ----------------')
	#soup.decompose
	#xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_DATE )
	#xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_TITLE )

def LoadMovieView(url):
	#url="http://viaplay.se/film/samtliga/250/most_popular"
	#url="http://viaplay.se/film/hd-filmer/8704"
	listing = []
	page=urllib2.urlopen(url)
	soup = BeautifulSoup(page.read())
	movies=soup.findAll('ul', attrs={'class' : 'media-list movies clearfix'})
	for eachmovie in movies:
		for tmp in eachmovie.findAll('li'):
			movie_genre = str(tmp.contents[7].contents[3].contents[0].string).replace('/',',')
			try:
				movie_year = int(tmp.contents[7].contents[5].contents[1].string)
			except:
				movie_year=0
			movie_actors = str(tmp.contents[7].contents[9].string).replace('Skådespelare: ','').split(',')
			movie_director = str(tmp.contents[7].contents[11].string).replace('Regissör: ','')
			movie_url=urlparse.urljoin(GetDomain(),str(tmp.contents[1].attrs[2][1]))
			genre = tmp.contents[3].contents[1].contents[1]
			pushHD=tmp.contents[3].contents[7]
			if(IsHD(movie_url,genre,pushHD)):
				overlay=xbmcgui.ICON_OVERLAY_HD
			else:
				overlay=xbmcgui.ICON_OVERLAY_NONE
			
			title = unicode(tmp.contents[7].contents[1].contents[1].attrs[1][1]).encode("utf-8") + GetHDTag(movie_url,genre,pushHD)
			listItem = xbmcgui.ListItem(title)
			poster = Get_PosterUrl(str(tmp.contents[1].contents[1]))
			#xbmc.log('Poster: ' + poster)
			listItem.setThumbnailImage(poster)
			listItem.setLabel2(GetHDTag(movie_url,genre,pushHD))
			description =FixHtmlString(tmp.contents[7].contents[7].string).decode("utf-8")
			infoLabels = { "Title": title,"Genre": movie_genre,"Year": movie_year,"Director": movie_director,"Cast": movie_actors,"Plot": description,'videoresolution':'','overlay':overlay }
			listItem.setInfo(type="Video", infoLabels=infoLabels)
			url=str(sys.argv[0]) + '?' + "url=" + urllib.quote_plus(movie_url) + "&mode=play"
			xbmcplugin.addDirectoryItem(thisPlugin,url,listItem)
			#xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_LABEL )
			#print eachmovie['href']+","+eachmovie.string  tmp.contents[1].contents[1]
			#listing.append(unicode(tmp.contents[1].contents[3].string).encode("utf-8"))
	SortListItems()
	xbmcplugin.setContent(thisPlugin, 'movies')
	xbmc.executebuiltin("Container.SetViewMode(508)")
def FixHtmlString(value):
	string =str(value)
	string = string.replace('&aring;','å')
	string = string.replace('&auml;','ä')
	string = string.replace('&ouml;','ö')
	string = string.replace('&Aring;','Å')
	string = string.replace('&Auml;','Ä')
	string = string.replace('&Ouml;','Ö')
	string = string.replace('&hellip;','...')
	string = string.replace('&quot;','\"')
	string = string.replace('&amp;','&')
	string = string.replace('&oslash;','ø')
	string = string.replace('&Oslash;','Ø')
	string = string.replace('&aelig;','æ')
	string = string.replace('&AElig;','Æ')
	string = string.replace('&Eacute;','É')
	string = string.replace('&eacute;','é')
	return string
def unescape(s):
    p = htmllib.HTMLParser(None)
    p.save_bgn()
    p.feed(s)
    return p.save_end()
def GetHDTag(url,genre,pushHD):
	if str(url).find('hd-filmer') > -1:
		return ' (HD)'
	elif str(genre).find('HD-film') > -1:
		return ' (HD)'
	elif str(pushHD).find('push hd') > -1:
		return ' (HD)'
	else:
		return ''
def IsHD(url,genre,pushHD):
	if str(url).find('hd-filmer') > -1:
		return True
	elif str(genre).find('HD-film') > -1:
		return True
	elif str(pushHD).find('push hd') > -1:
		return True
	else:
		return False
def Get_PosterUrl(value):
	list=value.split("\"")
	xbmc.log('URL: '+str(list[1]))
	return str(list[1])
def CreateHtmlFile(url):
	tmpdir=tempfile.gettempdir()
	path = os.path.join(tmpdir, "play.html")
	f = open(path, "w")
	content = '<html><head><title>Startar Viaplay</title><meta http-equiv=\"REFRESH\" content=\"0;url='+ url +'\"> </head><body bgcolor=\"black\"><p>Startar Viaplay...</p></body></html>'
	f.write(content)
	f.close()
	
	return path
def SetupMovieMenu():
	links = GetLinks('Movies')
	for link in links:
		#xbmc.log('SetupTvMenu, url: ' + urllib.quote_plus(link.url))
		url =str(sys.argv[0]) + '?' + "mode="+link.cmd+"&url="+urllib.quote_plus(link.url)
		AddListItem(link.name,url,True)
		xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_TITLE )
	xbmc.executebuiltin("Container.SetViewMode(50)")

def SetupChildrenMoviesMenu():
	links = GetLinks('Children_Movies')
	for link in links:
		#xbmc.log('SetupTvMenu, url: ' + urllib.quote_plus(link.url))
		url =str(sys.argv[0]) + '?' + "mode="+link.cmd+"&url="+urllib.quote_plus(link.url)
		AddListItem(link.name,url,True)
		xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_TITLE )
	xbmc.executebuiltin("Container.SetViewMode(50)")

def SetupChildrenTvMenu():
	links = GetLinks('Children_TV')
	for link in links:
		#xbmc.log('SetupTvMenu, url: ' + urllib.quote_plus(link.url))
		url =str(sys.argv[0]) + '?' + "mode="+link.cmd+"&url="+urllib.quote_plus(link.url)
		AddListItem(link.name,url,True)
	xbmc.executebuiltin("Container.SetViewMode(50)")
	
def SetupChildrenMenu():
	url=str(sys.argv[0]) + '?' + "mode=childrenmovies&url="
	AddListItem(unicode(__language__(4015)).encode('utf-8'),url,True) #Film
	
	url=str(sys.argv[0]) + '?' + "mode=childrentv&url="
	AddListItem(unicode(__language__(4016)).encode('utf-8'),url,True) #TV
	
	xbmc.executebuiltin("Container.SetViewMode(50)")

def SetupSportCategoryMenu():
	links = GetLinks('Sports_Category')
	for link in links:
		#xbmc.log('SetupTvMenu, url: ' + urllib.quote_plus(link.url))
		url =str(sys.argv[0]) + '?' + "mode="+link.cmd+"&url="+urllib.quote_plus(link.url)
		AddListItem(link.name,url,True)
	xbmc.executebuiltin("Container.SetViewMode(50)")
def SetupSportMenu():
	links = GetLinks('Sports')
	for link in links:
		#xbmc.log('SetupTvMenu, url: ' + urllib.quote_plus(link.url))
		url =str(sys.argv[0]) + '?' + "mode="+link.cmd+"&url="+urllib.quote_plus(link.url)
		AddListItem(link.name,url,True)
	xbmc.executebuiltin("Container.SetViewMode(50)")
def SetupTvMenu():
	links = GetLinks('TV')
	for link in links:
		#xbmc.log('SetupTvMenu, url: ' + urllib.quote_plus(link.url))
		url =str(sys.argv[0]) + '?' + "mode="+link.cmd+"&url="+urllib.quote_plus(link.url)
		xbmc.log("TV menu, "+link.cmd + " URL: " + url)
		AddListItem(link.name,url,True)
	xbmc.executebuiltin("Container.SetViewMode(50)")
	
	
def SearchForTV(url):
	keyboard = xbmc.Keyboard('')
	keyboard.setHeading('Sök efter serie, skådespelare eller regissör...')
	keyboard.doModal()
	if (keyboard.isConfirmed()):
		text = keyboard.getText()
		text = text.replace(' ','+')
		search_url = url + text
		xbmc.log('Search url = ' + search_url)
		LoadEpisodesView(search_url)
def SearchForMovie(url):
	keyboard = xbmc.Keyboard('')
	keyboard.setHeading('Sök efter titel på film, skådespelare eller regissör...')
	keyboard.doModal()
	if (keyboard.isConfirmed()):
		text = keyboard.getText()
		text = text.replace(' ','+')
		search_url = url + text
		xbmc.log('Search url = ' + search_url)
		LoadMovieView(search_url)
def LoadSeasons(url):
	page=urllib2.urlopen(url)
	soup = BeautifulSoup(page.read())
	seasons=soup.findAll('div', attrs={'class' : 'media-wrapper seasons'})
	for season in seasons:
		season_Name = unicode(season.contents[1].contents[0]).encode('utf-8')
		#xbmcgui.Dialog().ok( "LoadSeasons",season_Name)
		url=str(sys.argv[0]) + '?' + "mode=viewtvseason&url="+urllib.quote_plus(url)
		AddListItem(season_Name,url,True)
	xbmcplugin.setContent(thisPlugin, 'files')
	xbmc.executebuiltin("Container.SetViewMode(51)")
def SetupMainMenu():
	
	url=str(sys.argv[0]) + '?' + "mode=children&url="
	AddListItem(unicode(__language__(4028)).encode('utf-8'),url,True) #Barn
	
	url=str(sys.argv[0]) + '?' + "mode=movies&url="
	AddListItem(unicode(__language__(4015)).encode('utf-8'),url,True) #Film
	
	url=str(sys.argv[0]) + '?' + "mode=sport&url="
	AddListItem(unicode(__language__(4017)).encode('utf-8'),url,True) #Sport
	
	url=str(sys.argv[0]) + '?' + "mode=tv&url="
	AddListItem(unicode(__language__(4016)).encode('utf-8'),url,True) #TV
	
	url=str(sys.argv[0]) + '?' + "mode=settings&url="
	AddListItem(unicode(__language__(4018)).encode('utf-8'),url,False) #Inställningar
	
	# url=str(sys.argv[0]) + '?' + "mode=checkupdate&url="
	# AddListItem("Check for update",url,False)
	
def SetupCategoriesTV():
	links = GetLinks('TV_Category')
	for link in links:
		#xbmc.log('SetupCategoriesTV, url: ' + urllib.quote_plus(link.url))
		url =str(sys.argv[0]) + '?' + "mode="+link.cmd+"&url="+urllib.quote_plus(link.url)
		AddListItem(link.name,url,True)
	xbmc.executebuiltin("Container.SetViewMode(50)")
	

def SetupCategories():
	category=''
	links = GetLinks('Movies_Category')
	for link in links:
		#xbmc.log('SetupCategoriesTV, url: ' + urllib.quote_plus(link.url))
		url =str(sys.argv[0]) + '?'  "category=" + category + "&mode="+link.cmd+"&url="+urllib.quote_plus(link.url)
		AddListItem(link.name,url,True)
	xbmc.executebuiltin("Container.SetViewMode(50)")
	
	
def AddListItem(title,url,isFolder):
	listItem = xbmcgui.ListItem(title)
	xbmcplugin.addDirectoryItem(thisPlugin,url,listItem,isFolder=isFolder)
	#xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_LABEL )

def PlayUrl(url):
	xbmc.log("PlayUrl: " + url)
	xbmc.log('Platform is: ' + os.name)
	xbmc.log("Viaplaylauncher path: " + VIAPLAYER_PATH)
	
	if(os.name=='nt'):
		xbmc.log("Launching MceRemoteControl")
		sp.Popen([AUTOHOTKEY_PATH])
		xbmc.log("Launching Viaplaylauncher")
		p=sp.Popen([VIAPLAYER_PATH, "-k",url])
		p.wait()
	else:
		xbmc.log("Launching Webbrowser")
		webbrowser.open(url)

def GetXbmcVersion():
	#rev_re = re.compile(' r(\d+)') 
	#xbmc_rev = int(rev_re.search(xbmc.getInfoLabel( "System.BuildVersion" )).group(1))
	return xbmc.getInfoLabel( "System.BuildVersion" )

def CheckForUpdate():
	xbmc.log("Checking For update...")
	currentVersion= xbmcaddon.Addon().getAddonInfo('version')
	xbmc.log("Current version is: " + currentVersion)
	page=urllib2.urlopen("http://www.dsd.se/viaplay/latestversion.txt")
	newVersion=page.read()
	xbmc.log("New version is: "+newVersion)
	if(newVersion > currentVersion):
		xbmcgui.Dialog().ok("Viaplay add-on", "There's a new version available." + newVersion)
	else:
		xbmcgui.Dialog().ok("Viaplay add-on", "You are currently running the latest version.")
		
params = parameters_string_to_dict(sys.argv[2])
mode = params.get("mode", None)
url = urllib.unquote_plus(params.get("url",  ""))
title = urllib.unquote_plus(params.get("title",  ""))
id = urllib.unquote_plus(params.get("id",  ""))
poster = urllib.unquote_plus(params.get("poster",  ""))
season = urllib.unquote_plus(params.get("season",  ""))
episode  = urllib.unquote_plus(params.get("episode",  ""))

if not sys.argv[2] or not mode:
	
	#checkplayercore()
	#checkadvsettings()
	#xbmc.log("XBMC_Version: " + GetXbmcVersion())
	
	SetupMainMenu()
	CreateDatabase()
	UpgradeDatabase()
	xbmc.log("Database Version: " + DatabaseVersion())
	#Check if username and password are set, if not then notify user
	if(len(SETTINGS_USERNAME)==0):
		xbmc.executebuiltin('xbmc.Notification('+unicode(__language__(4009)).encode('utf-8')+','+unicode(__language__(4010)).encode('utf-8')+',8000)')
		
elif mode=="view_sports":
	LoadLiveSports(url)
elif mode=="checkupdate":
	CheckForUpdate()
elif mode=="favorites_tv":
	LoadTvFavorites()
elif mode=="add_tv_favorite":
	AddFavorite(str(title).decode('utf-8'),"tv",url,poster,0,"","")
	xbmc.executebuiltin("xbmc.Notification(Information,"+ unicode(__language__(4022)).encode('utf-8') +",4000)")
elif mode=="remove_tv_favorite":
	dialog = xbmcgui.Dialog()
	ret = dialog.yesno('Viaplay',unicode(__language__(4021)).encode('utf-8') +" '"+ title +"'?") #Do you want to remove favorite
	if ret:
		RemoveFavorite(id)
		xbmc.executebuiltin("Container.Refresh")
elif mode=="remove_watched_episode":
	RemoveWatchedEpisode(title,season,episode)
	xbmc.executebuiltin("Container.Refresh")
elif mode=="add_watched_episode":
	AddWatchedEpisode(title,season,episode)
	xbmc.executebuiltin("Container.Refresh")
elif mode=="view_sport_schedule":
	LoadLiveSportScheduleGetDays(url)
elif mode =="sport_schedule_day":
	tmp_url = urlparse.urljoin(GetDomain() ,"/sport")
	xbmc.log("Before, LoadLiveSportScheduleForSpecificDay, url: " + tmp_url + " id: " +id)
	LoadLiveSportScheduleForSpecificDay(tmp_url,id)
	xbmc.log('Finished')
elif mode=="view_sport_live":
	SetupSportCategoryMenu()
elif mode=="sport":
	SetupSportMenu()
	xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_LABEL )
elif mode=='search_movie':
	SearchForMovie(url)
elif mode=='search_tv':
	SearchForTV(url)
elif mode=='view_tv_alphabet':
	LoadTvByAlphabet(url)
elif mode=='view_movie_alphabet':
	LoadMoviesByAlphabet(url)
elif mode=='view_tv_episodes':
	LoadEpisodesView(url)
elif mode=='series':
	#LoadSeasons(url)
	#showData=GetShowData('Lost')
	#xbmc.log("TV-Series title: " + title)
	LoadEpisodes(url,title)
elif mode=='viewtv':
	LoadTvSeries(url)
elif mode=='tv':
	SetupTvMenu()
	xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_LABEL )
elif mode=="childrentv":
	SetupChildrenTvMenu()
elif mode=="childrenmovies":
	SetupChildrenMoviesMenu()
elif mode=="children":
	SetupChildrenMenu()
elif mode=='movies':
	SetupMovieMenu()
	xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_LABEL )
elif mode=='view':
	LoadMovieView(url)
elif mode=='categoriestv':
	SetupCategoriesTV()
elif mode=='settings':
	__settings__.openSettings()
	ReloadSettings()
elif mode=='categories':
	SetupCategories()
elif mode == 'play':
	#path=CreateHtmlFile(url)
	#webplayer = xbmc.Player()
	#webplayer.play(path)
	if url.find("tv") > 0:
		short_url = url.replace(GetDomain(),"")
		xbmc.log("Title from url: " + GetTitleFromUrl(short_url))
		xbmc.log("Episode from URL: " + GetEpisode(short_url))
		xbmc.log("Season from URL: " + GetSeason(short_url))
		AddWatchedEpisode(GetTitleFromUrl(short_url),GetSeason(short_url),GetEpisode(short_url))
		xbmc.executebuiltin("Container.Refresh")

	xbmc.log("Play URL: " + url)
	PlayUrl(url)
	#xbmcgui.Dialog().ok( "Play", url )
#xbmcplugin.addSortMethod( thisPlugin, sortMethod=xbmcplugin.SORT_METHOD_LABEL )
xbmcplugin.endOfDirectory(thisPlugin)